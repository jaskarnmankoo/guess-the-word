{"version":3,"file":"component---src-pages-index-tsx-daaeed972309fc1d08a0.js","mappings":"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","sources":["webpack://guess-the-word/./src/components/common/Letter.tsx","webpack://guess-the-word/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react';\n\ninterface Props {\n  alpha: string;\n  letters: { [x: string]: number };\n  lives: number;\n  word: string;\n  wordLetters: string[];\n  reset: (message: string) => void;\n  setLetters: React.Dispatch<React.SetStateAction<{ [x: string]: number }>>;\n  setLives: React.Dispatch<React.SetStateAction<number>>;\n}\n\n/** Renders a Letter of the Alphabet as a Button */\nexport default function Letter({\n  alpha,\n  letters,\n  lives,\n  wordLetters,\n  word,\n  reset,\n  setLetters,\n  setLives\n}: Props) {\n  const clickLetter = React.useCallback(() => {\n    const lettersCopy = { ...letters };\n    lettersCopy[alpha] = 1;\n\n    if (wordLetters.includes(alpha)) {\n      lettersCopy[alpha] = 2;\n\n      let win = true;\n\n      for (let i = 0; i < wordLetters.length; i++) {\n        if (!lettersCopy[wordLetters[i]]) {\n          win = false;\n          break;\n        }\n      }\n\n      if (win) {\n        reset(\n          `Congratulations on winning Guess the Word! The word was ${word}.`\n        );\n        return;\n      }\n    } else {\n      const livesCopy = lives;\n\n      if (livesCopy - 1 === 0) {\n        reset(`You lost! The word was ${word}.`);\n        return;\n      }\n\n      setLives(lives - 1);\n    }\n\n    setLetters(lettersCopy);\n  }, [alpha, letters, lives, reset, setLetters, setLives, word, wordLetters]);\n\n  return (\n    <button\n      type=\"button\"\n      className={`w-16 rounded-xl border-2 border-black p-4 dark:border-white ${\n        letters[alpha] === 1\n          ? 'bg-red-600 dark:bg-black'\n          : letters[alpha] === 2\n          ? 'bg-green-600'\n          : ''\n      }`}\n      disabled={letters[alpha] === 1 || letters[alpha] === 2}\n      onClick={clickLetter}\n    >\n      {alpha}\n    </button>\n  );\n}\n","import * as React from 'react';\n\nimport Letter from '../components/common/Letter';\nimport SearchEngineOptimization from '../components/common/SearchEngineOptimization';\n\nimport * as UTILS from '../utils';\n\n/** Renders the Guess the Word game */\nexport default function Home(): JSX.Element {\n  const [difficulty, setDifficulty] = React.useState('');\n  const [lives, setLives] = React.useState(6);\n  const [letters, setLetters] = React.useState({ ...UTILS.LETTERS });\n  const [start, setStart] = React.useState(false);\n\n  const word = React.useRef<string>('');\n  const wordLetters = React.useRef<string[]>([]);\n\n  const reset = React.useCallback((message: string): void => {\n    alert(message);\n\n    word.current = '';\n    wordLetters.current = [];\n\n    setDifficulty('');\n    setLives(6);\n    setLetters({ ...UTILS.LETTERS });\n    setStart(false);\n  }, []);\n\n  const easyDifficulty = React.useCallback(() => {\n    setDifficulty('easy');\n    setLives(10);\n  }, []);\n\n  const mediumDifficulty = React.useCallback(() => {\n    setDifficulty('medium');\n    setLives(6);\n  }, []);\n\n  const hardDifficulty = React.useCallback(() => {\n    setDifficulty('hard');\n    setLives(3);\n  }, []);\n\n  const animalsGame = React.useCallback(() => {\n    const randomWord =\n      UTILS.ANIMALS[Math.floor(Math.random() * UTILS.ANIMALS.length)];\n\n    wordLetters.current = randomWord.toUpperCase().split('');\n    word.current = randomWord;\n    setStart(true);\n  }, []);\n\n  const phrasalVerbsGame = React.useCallback(() => {\n    const randomWord =\n      UTILS.PHRASALVERBS[Math.floor(Math.random() * UTILS.PHRASALVERBS.length)];\n\n    wordLetters.current = randomWord.toUpperCase().split('');\n    word.current = randomWord;\n    setStart(true);\n  }, []);\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1 text-center\">\n        {!start ? (\n          <>\n            <p className=\"text-xl\">\n              {!difficulty\n                ? 'Choose a difficulty level...'\n                : `At ${difficulty.toUpperCase()} difficulty you will have ${lives} lives.`}\n            </p>\n            <div className=\"grid grid-cols-3\">\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={easyDifficulty}\n                disabled={difficulty === 'easy'}\n              >\n                Easy\n              </button>\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={mediumDifficulty}\n                disabled={difficulty === 'medium'}\n              >\n                Medium\n              </button>\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={hardDifficulty}\n                disabled={difficulty === 'hard'}\n              >\n                Hard\n              </button>\n            </div>\n            {difficulty && (\n              <>\n                <p>Choose the category you would like to play!</p>\n                <div className=\"grid grid-cols-2\">\n                  <button\n                    type=\"button\"\n                    onClick={animalsGame}\n                    className=\"game-mode\"\n                  >\n                    Animals\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={phrasalVerbsGame}\n                    className=\"game-mode\"\n                  >\n                    Phrasal Verbs\n                  </button>\n                </div>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <p>\n              Your lives: <b>{lives}</b>\n            </p>\n            <div className=\"flex justify-center\">\n              <ul className=\"flex flex-wrap\" aria-label=\"the word to guess\">\n                {wordLetters.current.map((letter, index) => (\n                  <li\n                    className={\n                      letters[letter] === 2\n                        ? 'text-black dark:text-white'\n                        : 'text-white dark:text-dark-mode'\n                    }\n                    key={`guess-${String(letter)}-${String(index)}`}\n                  >\n                    {letter}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div id=\"alphabet\" className=\"flex flex-wrap justify-center gap-8\">\n              {UTILS.ALPHABET.map((alpha) => (\n                <React.Fragment key={`alpha-${alpha}`}>\n                  <Letter\n                    alpha={alpha}\n                    letters={letters}\n                    lives={lives}\n                    word={word.current}\n                    wordLetters={wordLetters.current}\n                    reset={reset}\n                    setLetters={setLetters}\n                    setLives={setLives}\n                  />\n                </React.Fragment>\n              ))}\n            </div>\n          </>\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["Letter","alpha","letters","lives","wordLetters","word","reset","setLetters","setLives","clickLetter","React","lettersCopy","includes","win","i","length","type","className","disabled","onClick","Home","difficulty","setDifficulty","UTILS","start","setStart","message","alert","current","easyDifficulty","mediumDifficulty","hardDifficulty","animalsGame","randomWord","Math","floor","random","toUpperCase","split","phrasalVerbsGame","SearchEngineOptimization","title","map","letter","index","key","String","id"],"sourceRoot":""}