{"version":3,"file":"component---src-pages-index-tsx-f49d294db15c1a77f965.js","mappings":"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","sources":["webpack://guess-the-word/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport SearchEngineOptimization from '../components/common/SearchEngineOptimization';\n\nimport * as UTILS from '../utils';\n\n/** Renders the Guess the Word game */\nexport default function Home(): JSX.Element {\n  const [difficulty, setDifficulty] = React.useState('');\n  const [lives, setLives] = React.useState(6);\n  const [letters, setLetters] = React.useState({ ...UTILS.LETTERS });\n  const [start, setStart] = React.useState(false);\n\n  const word = React.useRef<string>('');\n  const wordLetters = React.useRef<string[]>([]);\n\n  const reset = React.useCallback((message: string): void => {\n    alert(message);\n\n    word.current = '';\n    wordLetters.current = [];\n\n    setDifficulty('');\n    setLives(6);\n    setLetters({ ...UTILS.LETTERS });\n    setStart(false);\n  }, []);\n\n  const easyDifficulty = React.useCallback(() => {\n    setDifficulty('easy');\n    setLives(10);\n  }, []);\n\n  const mediumDifficulty = React.useCallback(() => {\n    setDifficulty('medium');\n    setLives(6);\n  }, []);\n\n  const hardDifficulty = React.useCallback(() => {\n    setDifficulty('hard');\n    setLives(3);\n  }, []);\n\n  const animalsGame = React.useCallback(() => {\n    const randomWord =\n      UTILS.ANIMALS[Math.floor(Math.random() * UTILS.ANIMALS.length)];\n\n    wordLetters.current = randomWord.toUpperCase().split('');\n    word.current = randomWord;\n    setStart(true);\n  }, []);\n\n  const phrasalVerbsGame = React.useCallback(() => {\n    const randomWord =\n      UTILS.PHRASALVERBS[Math.floor(Math.random() * UTILS.PHRASALVERBS.length)];\n\n    wordLetters.current = randomWord.toUpperCase().split('');\n    word.current = randomWord;\n    setStart(true);\n  }, []);\n\n  /** Executes win/lose login when user clicks a letter */\n  const clickLetter = (alpha: string): void => {\n    const lettersCopy = { ...letters };\n    lettersCopy[alpha] = 1;\n\n    if (wordLetters.current.includes(alpha)) {\n      lettersCopy[alpha] = 2;\n\n      let win = true;\n\n      for (let i = 0; i < wordLetters.current.length; i++) {\n        if (!lettersCopy[wordLetters.current[i]]) {\n          win = false;\n          break;\n        }\n      }\n\n      if (win) {\n        reset(\n          `Congratulations on winning Guess the Word! The word was ${word.current}.`\n        );\n        return;\n      }\n    } else {\n      const livesCopy = lives;\n\n      if (livesCopy - 1 === 0) {\n        reset(`You lost! The word was ${word.current}.`);\n        return;\n      }\n\n      setLives(lives - 1);\n    }\n\n    setLetters(lettersCopy);\n  };\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1 text-center\">\n        {!start ? (\n          <>\n            <p className=\"text-xl\">\n              {!difficulty\n                ? 'Choose a difficulty level...'\n                : `At ${difficulty.toUpperCase()} difficulty you will have ${lives} lives.`}\n            </p>\n            <div className=\"grid grid-cols-3\">\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={easyDifficulty}\n                disabled={difficulty === 'easy'}\n              >\n                Easy\n              </button>\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={mediumDifficulty}\n                disabled={difficulty === 'medium'}\n              >\n                Medium\n              </button>\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={hardDifficulty}\n                disabled={difficulty === 'hard'}\n              >\n                Hard\n              </button>\n            </div>\n            {difficulty && (\n              <>\n                <p>Choose the category you would like to play!</p>\n                <div className=\"grid grid-cols-2\">\n                  <button\n                    type=\"button\"\n                    onClick={animalsGame}\n                    className=\"game-mode\"\n                  >\n                    Animals\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={phrasalVerbsGame}\n                    className=\"game-mode\"\n                  >\n                    Phrasal Verbs\n                  </button>\n                </div>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <p>\n              Your lives: <b>{lives}</b>\n            </p>\n            <div className=\"flex justify-center\">\n              <ul className=\"flex flex-wrap\" aria-label=\"the word to guess\">\n                {wordLetters.current.map((letter, index) => (\n                  <li\n                    className={\n                      letters[letter] === 2\n                        ? 'text-black dark:text-white'\n                        : 'text-white dark:text-dark-mode'\n                    }\n                    key={`guess-${String(letter)}-${String(index)}`}\n                  >\n                    {letter}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div id=\"alphabet\" className=\"flex flex-wrap gap-8 justify-center\">\n              {UTILS.ALPHABET.map((alpha) => (\n                <button\n                  type=\"button\"\n                  key={`alpha-${alpha}`}\n                  className={`p-4 rounded-xl w-16 border-2 border-black dark:border-white ${\n                    letters[alpha] === 1\n                      ? 'bg-red-600 dark:bg-black'\n                      : letters[alpha] === 2\n                      ? 'bg-green-600'\n                      : ''\n                  }`}\n                  disabled={letters[alpha] === 1 || letters[alpha] === 2}\n                  onClick={() => clickLetter(alpha)}\n                >\n                  {alpha}\n                </button>\n              ))}\n            </div>\n          </>\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["Home","React","difficulty","setDifficulty","lives","setLives","UTILS","letters","setLetters","start","setStart","word","wordLetters","reset","message","alert","current","easyDifficulty","mediumDifficulty","hardDifficulty","animalsGame","randomWord","Math","floor","random","toUpperCase","split","phrasalVerbsGame","title","className","map","letter","index","key","String","id","alpha","type","disabled","onClick","lettersCopy","includes","win","i","length","clickLetter"],"sourceRoot":""}