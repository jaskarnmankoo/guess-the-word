{"version":3,"file":"component---src-pages-index-js-ced78336e9da5ac41221.js","mappings":"6LAAaA,EAAW,CACtB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGWC,EAAU,CACrB,WACA,YACA,YACA,SACA,MACA,WACA,WACA,MACA,YACA,SACA,SACA,SACA,YACA,MACA,OACA,SACA,MACA,QACA,OACA,UACA,YACA,QACA,WACA,UACA,YACA,MACA,cACA,SACA,UACA,UACA,UACA,aACA,aACA,SACA,OACA,QACA,YACA,MACA,YACA,SACA,OACA,QACA,YACA,OACA,SACA,OACA,WACA,MACA,UACA,UACA,SACA,WACA,OACA,YACA,OACA,SACA,SACA,QACA,UACA,MACA,QACA,WACA,gBACA,MACA,MACA,SACA,SACA,QACA,OACA,WACA,MACA,MACA,OACA,OACA,UACA,SACA,cACA,UACA,OACA,MACA,OACA,QACA,YACA,WACA,UACA,UACA,cACA,SACA,UACA,cACA,aACA,OACA,UACA,OACA,OACA,WACA,QACA,UACA,eACA,SACA,QACA,QACA,cACA,QACA,OACA,OACA,SACA,SACA,MACA,YACA,WACA,aACA,QACA,gBACA,YACA,UACA,OACA,UACA,OACA,QACA,UACA,OACA,QACA,UACA,SACA,QACA,QACA,WACA,SACA,UACA,UACA,WACA,SACA,SACA,UACA,OACA,OACA,WACA,SACA,QACA,QACA,WACA,OACA,UACA,OACA,cACA,UACA,QACA,UACA,OACA,UACA,QACA,MACA,KACA,SACA,UACA,SACA,YACA,UACA,UACA,UACA,WACA,MACA,SACA,aACA,OACA,YACA,WACA,cACA,QACA,SACA,UACA,SACA,UACA,OACA,MACA,MACA,QACA,WACA,YACA,WACA,aACA,OACA,aACA,SACA,cACA,YACA,UACA,WACA,WACA,aACA,WACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,YACA,QACA,WACA,WACA,WAC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","sources":["webpack://guess-the-word/./src/utils.js","webpack://guess-the-word/./src/pages/index.js"],"sourcesContent":["export const ALPHABET = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '@',\n  '-'\n];\n\nexport const ANIMALS = [\n  'aardvark',\n  'albatross',\n  'alligator',\n  'alpaca',\n  'ant',\n  'anteater',\n  'antelope',\n  'ape',\n  'armadillo',\n  'donkey',\n  'baboon',\n  'badger',\n  'barracuda',\n  'bat',\n  'bear',\n  'beaver',\n  'bee',\n  'bison',\n  'boar',\n  'buffalo',\n  'butterfly',\n  'camel',\n  'capybara',\n  'caribou',\n  'cassowary',\n  'cat',\n  'caterpillar',\n  'cattle',\n  'chamois',\n  'cheetah',\n  'chicken',\n  'chimpanzee',\n  'chinchilla',\n  'chough',\n  'clam',\n  'cobra',\n  'cockroach',\n  'cod',\n  'cormorant',\n  'coyote',\n  'crab',\n  'crane',\n  'crocodile',\n  'crow',\n  'curlew',\n  'deer',\n  'dinosaur',\n  'dog',\n  'dogfish',\n  'dolphin',\n  'donkey',\n  'dotterel',\n  'dove',\n  'dragonfly',\n  'duck',\n  'dugong',\n  'dunlin',\n  'eagle',\n  'echidna',\n  'eel',\n  'eland',\n  'elephant',\n  'elephant-seal',\n  'elk',\n  'emu',\n  'falcon',\n  'ferret',\n  'finch',\n  'fish',\n  'flamingo',\n  'fly',\n  'fox',\n  'frog',\n  'gaur',\n  'gazelle',\n  'gerbil',\n  'giant-panda',\n  'giraffe',\n  'gnat',\n  'gnu',\n  'goat',\n  'goose',\n  'goldfinch',\n  'goldfish',\n  'gorilla',\n  'goshawk',\n  'grasshopper',\n  'grouse',\n  'guanaco',\n  'guinea-fowl',\n  'guinea-pig',\n  'gull',\n  'hamster',\n  'hare',\n  'hawk',\n  'hedgehog',\n  'heron',\n  'herring',\n  'hippopotamus',\n  'hornet',\n  'horse',\n  'human',\n  'hummingbird',\n  'hyena',\n  'ibex',\n  'ibis',\n  'jackal',\n  'jaguar',\n  'jay',\n  'jellyfish',\n  'kangaroo',\n  'kingfisher',\n  'koala',\n  'komodo-dragon',\n  'kookabura',\n  'kouprey',\n  'kudu',\n  'lapwing',\n  'lark',\n  'lemur',\n  'leopard',\n  'lion',\n  'llama',\n  'lobster',\n  'locust',\n  'loris',\n  'louse',\n  'lyrebird',\n  'magpie',\n  'mallard',\n  'manatee',\n  'mandrill',\n  'mantis',\n  'marten',\n  'meerkat',\n  'mink',\n  'mole',\n  'mongoose',\n  'monkey',\n  'moose',\n  'mouse',\n  'mosquito',\n  'mule',\n  'narwhal',\n  'newt',\n  'nightingale',\n  'octopus',\n  'okapi',\n  'opossum',\n  'oryx',\n  'ostrich',\n  'otter',\n  'owl',\n  'ox',\n  'oyster',\n  'panther',\n  'parrot',\n  'partridge',\n  'peafowl',\n  'pelican',\n  'penguin',\n  'pheasant',\n  'pig',\n  'pigeon',\n  'polar-bear',\n  'pony',\n  'porcupine',\n  'porpoise',\n  'prairie-dog',\n  'quail',\n  'quelea',\n  'quetzal',\n  'rabbit',\n  'raccoon',\n  'rail',\n  'ram',\n  'rat',\n  'raven',\n  'red-deer',\n  'red-panda',\n  'reindeer',\n  'rhinoceros',\n  'rook',\n  'salamander',\n  'salmon',\n  'sand-dollar',\n  'sandpiper',\n  'sardine',\n  'scorpion',\n  'sea-lion',\n  'sea-urchin',\n  'seahorse',\n  'seal',\n  'shark',\n  'sheep',\n  'shrew',\n  'skunk',\n  'snail',\n  'snake',\n  'sparrow',\n  'spider',\n  'spoonbill',\n  'squid',\n  'squirrel',\n  'starling',\n  'stingray',\n  'stinkbug',\n  'stork',\n  'swallow',\n  'swan',\n  'tapir',\n  'tarsier',\n  'termite',\n  'tiger',\n  'toad',\n  'trout',\n  'turkey',\n  'turtle',\n  'vicuÃ±a',\n  'viper',\n  'vulture',\n  'wallaby',\n  'walrus',\n  'wasp',\n  'water-buffalo',\n  'weasel',\n  'whale',\n  'wolf',\n  'wolverine',\n  'wombat',\n  'woodcock',\n  'woodpecker',\n  'worm',\n  'wren',\n  'yak',\n  'zebra'\n];\n\nexport const PHRASALVERBS = [\n  'add-up',\n  'blow-up',\n  'bring-up',\n  'call-off',\n  'carry-on',\n  'get-along',\n  'look-up',\n  'pull-over',\n  'turn-up',\n  'watch-out'\n];\n\nexport const getRandom = (temp) => {\n  let randomNum = Math.floor(Math.random() * temp.length);\n  let random = temp[randomNum];\n\n  return random;\n};\n\nexport const splitLetters = (random) => {\n  let s = random.toUpperCase();\n  let split = [];\n\n  for (let i = 0; i < s.length; i++) {\n    split.push(s.charAt(i));\n  }\n\n  return split;\n};\n","import * as React from 'react';\n\nimport SearchEngineOptimization from '../components/SearchEngineOptimization';\n\nimport * as UTILS from '../utils';\n\nexport default function Home() {\n  const [state, setState] = React.useState({\n    alphabet: UTILS.ALPHABET,\n    words: '',\n    randomWord: '',\n    letters: [],\n    clickedLetters: [],\n    matchedLetters: [],\n    lives: 6,\n    initialLives: 6,\n    clickedButton: null,\n    gameStarted: false,\n    chosenLevel: '',\n    gameOver: false\n  });\n\n  const getInitialState = () => {\n    setState({\n      alphabet: UTILS.ALPHABET,\n      words: '',\n      randomWord: '',\n      letters: [],\n      clickedLetters: [],\n      matchedLetters: [],\n      lives: 6,\n      initialLives: 6,\n      clickedButton: null,\n      gameStarted: false,\n      chosenLevel: '',\n      gameOver: false\n    });\n  };\n\n  const animalsGame = () => {\n    const random = UTILS.getRandom(UTILS.ANIMALS);\n    const letters = UTILS.splitLetters(random);\n\n    setState({\n      ...state,\n      clickedButton: 'animals',\n      clickedLetters: [],\n      gameStarted: true,\n      letters: letters,\n      lives: state.initialLives,\n      matchedLetters: [],\n      randomWord: random,\n      words: UTILS.ANIMALS\n    });\n  };\n\n  const phrasalVerbsGame = () => {\n    const random = UTILS.getRandom(UTILS.PHRASALVERBS);\n    const letters = UTILS.splitLetters(random);\n\n    setState({\n      ...state,\n      clickedButton: 'phrasalVerbs',\n      clickedLetters: [],\n      gameStarted: true,\n      letters: letters,\n      lives: state.initialLives,\n      matchedLetters: [],\n      randomWord: random,\n      words: UTILS.PHRASALVERBS\n    });\n  };\n\n  const checkLetter = (e) => {\n    let letterDoesNotEqualE = true;\n\n    let localClickedLetters = [...state.clickedLetters, e];\n    let localLives = state.lives;\n    let localMatchedLetters = state.matchedLetters;\n\n    for (const letter in state.letters) {\n      if (state.letters[letter] === e) {\n        letterDoesNotEqualE = false;\n        localMatchedLetters.push(e);\n\n        break;\n      }\n    }\n\n    if (letterDoesNotEqualE) {\n      localLives -= 1;\n    }\n\n    if (localLives === 0) {\n      const word = state.randomWord;\n      getInitialState();\n      alert(`You lost! The word was ${word}.`);\n    } else {\n      let foundAllLetters = true;\n      const word = state.randomWord;\n\n      for (let letter in word) {\n        if (!localMatchedLetters.includes(word[letter].toUpperCase())) {\n          foundAllLetters = false;\n          break;\n        }\n      }\n\n      if (foundAllLetters) {\n        getInitialState();\n        alert(`Congratulations on winning Hangman! The word was ${word}.`);\n      } else {\n        setState({\n          ...state,\n          clickedLetters: localClickedLetters,\n          lives: localLives,\n          matchedLetters: localMatchedLetters\n        });\n      }\n    }\n  };\n\n  const setLevel = (lives, level) => {\n    setState({\n      ...state,\n      initialLives: lives,\n      chosenLevel: level\n    });\n  };\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1 text-center\">\n        {!state.gameStarted ? (\n          <>\n            <p className=\"text-xl\">\n              Choose a difficulty level...&nbsp;\n              {state.chosenLevel &&\n                `At this level you will have ${state.initialLives} lives.`}\n            </p>\n            <div className=\"grid grid-cols-3\">\n              <button\n                className=\"game-mode\"\n                onClick={() => setLevel(10, 'easy')}\n                disabled={state.chosenLevel === 'easy'}\n              >\n                Easy\n              </button>\n              <button\n                className=\"game-mode\"\n                onClick={() => setLevel(6, 'medium')}\n                disabled={state.chosenLevel === 'medium'}\n              >\n                Medium\n              </button>\n              <button\n                className=\"game-mode\"\n                onClick={() => setLevel(2, 'hard')}\n                disabled={state.chosenLevel === 'hard'}\n              >\n                Hard\n              </button>\n            </div>\n            {state.chosenLevel && (\n              <>\n                <p>Choose the category you would like to play!</p>\n                <div className=\"grid grid-cols-2\">\n                  <button\n                    onClick={animalsGame}\n                    disabled={state.clickedButton === 'animals'}\n                    className=\"game-mode\"\n                  >\n                    Animals\n                  </button>\n                  <button\n                    onClick={phrasalVerbsGame}\n                    disabled={state.clickedButton === 'phrasalVerbs'}\n                    className=\"game-mode\"\n                  >\n                    Phrasal Verbs\n                  </button>\n                </div>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <p>\n              Your lives: <b>{state.lives}</b>\n            </p>\n            <div id=\"word-container\">\n              <ul id=\"word\" aria-label=\"the word to guess\">\n                {state.letters.map((letter) => (\n                  <li\n                    className={\n                      state.matchedLetters.includes(letter)\n                        ? 'foundedLetter'\n                        : 'letter'\n                    }\n                  >\n                    {letter}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div\n              id=\"alphabet\"\n              className=\"grid grid-cols-5 md:grid-cols-8 lg:grid-cols-12\"\n            >\n              {state.alphabet.map((alpha) => (\n                <button\n                  className={\n                    state.clickedLetters.includes(alpha)\n                      ? 'disabled'\n                      : state.gameStarted\n                      ? ''\n                      : 'disabled'\n                  }\n                  disabled={\n                    state.clickedLetters.includes(alpha)\n                      ? true\n                      : state.gameStarted\n                      ? false\n                      : true\n                  }\n                  onClick={() => checkLetter(alpha)}\n                >\n                  {alpha}\n                </button>\n              ))}\n            </div>\n          </>\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["ALPHABET","ANIMALS","PHRASALVERBS","getRandom","temp","Math","floor","random","length","splitLetters","s","toUpperCase","split","i","push","charAt","Home","React","alphabet","UTILS","words","randomWord","letters","clickedLetters","matchedLetters","lives","initialLives","clickedButton","gameStarted","chosenLevel","gameOver","state","setState","getInitialState","setLevel","level","SearchEngineOptimization","title","className","id","map","letter","includes","alpha","disabled","onClick","e","letterDoesNotEqualE","localClickedLetters","localLives","localMatchedLetters","word","alert","foundAllLetters","checkLetter"],"sourceRoot":""}